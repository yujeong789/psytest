name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스코드 가져오기
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. GitHub Actions 러너를 Tailscale 네트워크에 붙이기
      - name: Set up Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}

      # 3. SSH 키 저장
      # - name: Save SSH key
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
      #     chmod 600 ~/.ssh/deploy_key

      # 4. 서버에 파일 복사
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./"
          target: "~/project"
          debug: true

      # 5. 서버에서 docker compose 실행
      - name: Run docker compose on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/project
            # 백엔드용 .env 파일 생성
            echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" > .env
            echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env

            # 프론트엔드용 .env 파일 생성
            mkdir -p frontend/psytest
            echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" > frontend/psytest/.env
            
            docker compose up -d --build --no-cache # 문제생겼을 때만 캐시삭제하고 다시 빌드
            # docker compose up -d --build
